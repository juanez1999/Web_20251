// üìå 1. CALLBACKS (Funciones pasadas como argumento a otra funci√≥n)

// üîπ Simulaci√≥n de una operaci√≥n as√≠ncrona con setTimeout
function operacionAsincronaCallback(mensaje, callback) {
	setTimeout(() => {
		console.log(mensaje);
		callback(); // Llamamos al callback cuando la operaci√≥n finaliza
	}, 2000);
}

console.log('Inicio');

// Llamamos a la funci√≥n y pasamos un callback
operacionAsincronaCallback('Procesando datos...', function () {
	console.log('Operaci√≥n completada.');
});

console.log('Fin');
// üîπ Aunque el c√≥digo sigue ejecut√°ndose, el mensaje "Procesando datos..." aparece despu√©s de 2s

// ---------------------------------------------------------------

// üìå 2. PROMESAS (Manejan asincron√≠a de forma m√°s estructurada)

// üîπ Definici√≥n de una funci√≥n que retorna una promesa
function operacionAsincronaPromesa(mensaje) {
	return new Promise((resolve, reject) => {
		setTimeout(() => {
			if (mensaje) {
				resolve(`‚úÖ √âxito: ${mensaje}`); // Se resuelve la promesa
			} else {
				reject('‚ùå Error: No se recibi√≥ un mensaje'); // Se rechaza la promesa
			}
		}, 2000);
	});
}

console.log('Inicio');

// üîπ Usando then() y catch() para manejar la promesa
operacionAsincronaPromesa('Cargando datos...')
	.then((resultado) => {
		console.log(resultado);
	})
	.catch((error) => {
		console.error(error);
	});

console.log('Fin');

// ---------------------------------------------------------------

// üìå 3. ASYNC/AWAIT (Sintaxis m√°s clara para trabajar con Promesas)

// üîπ Funci√≥n as√≠ncrona usando async/await
async function ejecutarOperacion() {
	console.log('Inicio');

	try {
		let resultado = await operacionAsincronaPromesa('Descargando archivo...');
		console.log(resultado);
	} catch (error) {
		console.error(error);
	}

	console.log('Fin');
}

// Llamamos a la funci√≥n
ejecutarOperacion();

/* üî• Explicaci√≥n del orden de ejecuci√≥n:

1. "Inicio" se imprime primero.
2. La operaci√≥n as√≠ncrona inicia y se ejecuta en segundo plano.
3. "Fin" se imprime antes de que termine la operaci√≥n (porque JS sigue ejecutando el c√≥digo).
4. Despu√©s de 2s, la promesa se resuelve y se imprime "‚úÖ √âxito: Descargando archivo...".
*/

// ---------------------------------------------------------------

// üìå 4. FETCH API (Para hacer peticiones HTTP de forma as√≠ncrona)

// üîπ Petici√≥n GET a una API p√∫blica
async function obtenerUsuarios() {
	try {
		let respuesta = await fetch('https://jsonplaceholder.typicode.com/users');
		if (!respuesta.ok) throw new Error('Error en la petici√≥n');

		let datos = await respuesta.json(); // Convertimos la respuesta a JSON
		console.log('Usuarios obtenidos:', datos);
	} catch (error) {
		console.error('Error:', error);
	}
}

// Llamamos a la funci√≥n
obtenerUsuarios();
